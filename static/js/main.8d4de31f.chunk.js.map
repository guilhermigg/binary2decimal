{"version":3,"sources":["components/Header/index.js","components/Form/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","Form","props","state","decimal","binary","error","bin2dec","bind","this","alert","isNaN","counter","power","split","forEach","bit","length","Math","pow","setState","htmlFor","onChange","e","target","value","placeholder","type","onClick","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"+OASeA,G,YANA,kBACX,4BAAQC,GAAG,eAAX,iC,0CCDiBC,G,kBACjB,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTC,QAAS,EACTC,OAAQ,GACRC,OAAO,GAEX,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBAPD,E,uEAWd,IAAIH,EAASI,KAAKN,MAAME,OACxB,GAAiB,IAAdA,EAAO,GACN,OAAOK,MAAM,iCACX,GAAGC,MAAMN,GACX,OAAOK,MAAM,6BAEjB,IAAIN,EAAU,EAAOQ,EAAU,EAAOC,EAAQ,EAAOP,GAAQ,EAW7D,GATAD,EAAOS,MAAM,IAAIC,SAAQ,SAAAC,IAClBA,EAAM,GAAKA,EAAM,KAAGV,GAAQ,GAE/BM,IACAC,EAAQR,EAAOY,OAAOL,EAEtBR,GAAWY,EAAIE,KAAKC,IAAI,EAAEN,MAG1BP,EACC,OAAOI,MAAM,6BADND,KAAKW,SAAS,CAAChB,QAASA,M,+BAI/B,IAAD,OACJ,OACI,yBAAKJ,GAAG,cACJ,2BAAOqB,QAAQ,UAAf,kCACA,2BAAOC,SAAU,SAACC,GAAD,OAAK,EAAKH,SAAS,CAACf,OAAQkB,EAAEC,OAAOC,SAASzB,GAAG,SAAS0B,YAAY,WACvF,+CAAqBjB,KAAKN,MAAMC,QAAhC,KAEA,2BAAOJ,GAAG,aAAa2B,KAAK,SAC5BC,QAAUnB,KAAKF,QACfkB,MAAM,iB,GA1CYI,IAAMC,YCSzBC,EANH,kBACV,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACL2C,QAAQ3C,MAAMA,EAAM4C,c","file":"static/js/main.8d4de31f.chunk.js","sourcesContent":["import React from 'react';\nimport './header.css'\n\nconst Header = () => (\n    <header id=\"main-header\">\n        Bin2Dec - Binary to Decimal\n    </header>\n)\n\nexport default Header;","import React from 'react';\nimport './form.css';\n\nexport default class Form extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            decimal: 1,\n            binary: '',\n            error: false\n        }\n        this.bin2dec = this.bin2dec.bind(this)\n    }\n\n    bin2dec(){\n        var binary = this.state.binary\n        if(binary[0] === 0){\n            return alert('The first number have to be 1')\n        }else if(isNaN(binary)){\n            return alert('Only 0 and 1 are allowed!')\n        }\n        var decimal = 0; var counter = 0; var power = 0; var error = false;\n    \n        binary.split('').forEach(bit =>{\n            if(bit > 1 || bit < 0) error = true\n    \n            counter++;\n            power = binary.length-counter;\n            \n            decimal += bit*Math.pow(2,power)\n        })\n        \n        if(!error){ this.setState({decimal: decimal}) }\n        else return alert('Only 0 and 1 are allowed!')\n    }\n\n    render(){\n        return (\n            <div id=\"inputGroup\">\n                <label htmlFor=\"binary\"> Put the binary number below: </label>\n                <input onChange={(e)=>this.setState({binary: e.target.value})} id=\"binary\" placeholder=\"Binary\" />\n                <p> Decimal Number: {this.state.decimal} </p>\n\n                <input id=\"convertBtn\" type=\"button\" \n                onClick={ this.bin2dec } \n                value=\"Convert\" />\n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport './styles.css';\nimport Header from './components/Header';\nimport Form from './components/Form';\n\nconst App = () => (\n  <div className=\"App\">\n    <Header />\n    <Form />\n  </div>\n)\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}